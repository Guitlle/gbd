import numpy as np
import pymc as mc
import pymc.gp as gp

import dismod3.utils
from dismod3.utils import rate_for_range, generate_prior_potentials
from dismod3.settings import NEARLY_ZERO, MISSING

def setup(dm, key, data_list, rate_stoch=None):
    """ Generate the PyMC variables for a logistic/gp model of
    a single rate function

    Parameters
    ----------
    dm : dismod3.DiseaseModel
      the object containing all the data, priors, and additional
      information (like input and output age-mesh)
      
    key : str
      the name of the key for everything about this model (priors,
      initial values, estimations)

    data_list : list of data dicts
      the observed data to use in the beta-binomial liklihood function

    rate_stoch : pymc.Stochastic, optional
      a PyMC stochastic (or deterministic) object, with
      len(rate_stoch.value) == len(dm.get_estimation_age_mesh()).
      This is used to link beta-binomial stochs into a larger model,
      for example.

    Results
    -------
    vars : dict
      Return a dictionary of all the relevant PyMC objects for the
      logistic model.  vars['rate_stoch'] is of particular
      relevance; this is what is used to link this 
      into more complicated models, like the generic disease model.
    """
    vars = {}
    est_mesh = dm.get_estimate_age_mesh()

    M, C = dismod3.utils.uninformative_prior_gp(c=-5., diff_degree=2., amp=25., scale=300.)

    for d in data_list:
        if d['value'] == MISSING:
            print 'WARNING: data %d missing value' % id
            continue

        # ensure all rate data is valid
        a0 = d['age_start']
        a1 = d['age_end']
        assert a0 <= a1

        d_val = dm.value_per_1(d)
        if d_val < 0 or d_val > 1:
            print 'WARNING: data %d not in range (0,1)' % id
            continue
        elif d_val == 0:
            logit_val = -10.
        elif d_val == 1:
            logit_val = 10.
        else:
            logit_val = mc.logit(d_val)

        d_se = dm.se_per_1(d)
        if d_se == MISSING:
            logit_V = 10. #TODO: make this a function of the max of other variables
        elif d_se == 0.:
            logit_V = .1
        else:
            logit_V = (1/d_val + 1/(1-d_val))**2 * d_se**2
        

        gp.observe(M, C, [[a0,a1]], [logit_val], [logit_V])

        a2 = .5 * (a0 + a1 + 1)
        gp.observe(M, C, [[a2,a2]], [logit_val], [logit_V])

    prior_str = dm.get_priors(key)
    for p1 in prior_str.split(','):
        p = p1.split()
        if len(p) > 0 and p[0] == 'zero':
            a0 = int(p[1])
            a1 = int(p[2])
            gp.observe(M, C, [[a,a] for a in range(a0,a1+1)],
                       [-10. for a in range(a0,a1+1)],
                       [1. for a in range(a0,a1+1)])
            #gp.observe(M, C, [[a,a+5] for a in range(a0,a1+1-5)],
            #           [-10. for a in range(a0,a1+1)],
            #           [1. for a in range(a0,a1+1)])
            #gp.observe(M, C, [[a,a+10] for a in range(a0,a1+1-10)],
            #           [-10. for a in range(a0,a1+1)],
            #           [1. for a in range(a0,a1+1)])
               
        
    aa = np.array([[a,a] for a in est_mesh])
    logit_rate = gp.GP('logit_{%s}'%key, M, C, aa)
    vars['logit_rate'] = logit_rate

    aa = np.array([[a,a] for a in est_mesh])
    @mc.deterministic(name=key)
    def rate_stoch(logit_rate=logit_rate, age_intervals=aa):
        return mc.invlogit(logit_rate(age_intervals))

    vars['rate_stoch'] = rate_stoch

    # set up priors and observed data
    prior_str = dm.get_priors(key)
    vars['priors'] = generate_prior_potentials(prior_str, est_mesh, rate_stoch)

        
    return vars


def store_mcmc_fit(dm, key, rate_stoch):
    """ Store the parameter estimates generated by an MCMC fit of the
    beta-binomial model in the disease_model object, keyed by key
    
    Parameters
    ----------
    dm : dismod3.DiseaseModel
      the object containing all the data, priors, and additional
      information (like input and output age-mesh)

    key : str

    rate_stoch : PyMC stochastic or deterministic variable

    Results
    -------
    Save a sketch of the distribution of rate_stoch keyed by key.

    Notes
    -----
    This method will be used by other models that have beta binomial
    parts as building blocks, so don't simplify the parameters, at
    least not without thinking about where else the function might
    need to be used
    """
    rate = rate_stoch.trace()
    trace_len = len(rate)
    age_len = len(dm.get_estimate_age_mesh())
    
    sr = []
    for ii in xrange(age_len):
        sr.append(sorted([r([ii,ii]) for r in rate_stoch.trace()]))
    dm.set_mcmc('lower_ui', key, [sr[ii][int(.025*trace_len)] for ii in xrange(age_len)])
    dm.set_mcmc('median', key, [sr[ii][int(.5*trace_len)] for ii in xrange(age_len)])
    dm.set_mcmc('upper_ui', key, [sr[ii][int(.975*trace_len)] for ii in xrange(age_len)])
    dm.set_mcmc('mean', key, np.mean(sr, 0))

